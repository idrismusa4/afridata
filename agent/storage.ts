// This file handles storing dataset metadata in Supabase and files in Supabase Storage (Level 5).\n\nimport { DatasetMetadata } from \"./metadataGenerator\";\n// Assuming you have a Supabase client initialized elsewhere and imported here.\n// **IMPORTANT:** Adjust the import path below to match your actual Supabase client initialization file.\nimport { supabase } from '../lib/supabaseClient'; // Example import path\n\nexport async function saveDataset(\n  metadata: DatasetMetadata,\n  fileContent?: Buffer // Optional: content of the file for upload\n): Promise<void> {\n  console.log(`Attempting to save dataset metadata and file for: ${metadata.source_url}`);\n\n  try {\n    let fileUrl = metadata.file_url; // Start with the potential file_url from metadata or leave empty\n    const datasetId = metadata.id; // Use the generated temporary ID for file path and database entry\n\n    if (fileContent) {\n      console.log(\"Uploading file to Supabase Storage...\");\n      // **IMPORTANT:** Replace 'dataset-files' with your actual Supabase Storage bucket name.\n      const filePath = `${datasetId}/${metadata.title}.${metadata.file_type.toLowerCase()}`;\n      const { data, error: uploadError } = await supabase.storage\n        .from('dataset-files') // Replace with your bucket name\n        .upload(filePath, fileContent, { upsert: true }); // Use upsert to overwrite if needed\n\n      if (uploadError) {\n        console.error(\"Error uploading file to Supabase Storage:\", uploadError);\n        // Depending on your needs, you might throw an error or continue without file_url\n      } else if (data) {\n        // Construct the public URL. Adjust this based on your Supabase project settings and bucket privacy.\n        // This is a common pattern for public buckets, but verify for your setup.\n        fileUrl = `${supabase.storage.from('dataset-files').getPublicUrl(filePath).data?.publicUrl}`;\n        console.log(\`File uploaded successfully: ${fileUrl}\`);\n      }\n    }\n\n    // Prepare metadata for saving (excluding id as Supabase will generate one by default on insert\n    // unless you are using the temporary id in a specific way, adjust as needed).\n    // For this implementation, we will let Supabase generate the ID on insert\n    // and potentially update the agent workflow to use the generated ID later.\n    const { id, ...metadataWithoutId } = metadata; // Exclude the temporary ID\n\n    // **IMPORTANT:** Replace 'datasets' with your actual Supabase database table name.\n    console.log(\"Saving metadata to Supabase database...\");\n    const { data, error: dbError } = await supabase\n      .from('datasets') // Replace with your table name\n      .insert([{ ...metadataWithoutId, file_url: fileUrl }]); // Include the potentially updated file_url\n\n    if (dbError) {\n      console.error(\"Error saving metadata to Supabase database:\", dbError);\n      throw dbError; // Throw to indicate failure\n    } else {\n      console.log(\"Metadata saved successfully.\", data);\n      // TODO: If you need the Supabase-generated ID for further processing,\n      // you would access it from `data` here and potentially return it.\n    }\n\n  } catch (error: any) {\n    console.error(`Failed to save dataset for ${metadata.source_url}: ${error.message}`);\n    // Handle the error appropriately (e.g., logging, retrying)\n    throw error; // Re-throw or handle as needed\n  }\n}\n 